{
  "openapi" : "3.0.0",
  "info" : {
    "version" : "1.0.0-beta",
    "title" : "LinkSmart Historical Datastore"
  },
  "tags" : [ {
    "name" : "registry",
    "description" : "Registry API"
  }, {
    "name" : "data",
    "description" : "Data API"
  }, {
    "name" : "aggr",
    "description" : "Aggregation API"
  } ],
  "paths" : {
    "/registry/" : {
      "get" : {
        "tags" : [ "registry" ],
        "summary" : "Retrieves list of Datasources",
        "parameters" : [ {
          "$ref" : "#/components/parameters/ParamPage"
        }, {
          "$ref" : "#/components/parameters/ParamPerPage"
        }, {
          "name" : "If-Modified-Since",
          "in" : "header",
          "description" : "Conditional request based on date",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Registry"
                }
              }
            }
          },
          "304" : {
            "description" : "Not Modified (since `If-Modified-Since`)"
          },
          "401" : {
            "$ref" : "#/components/responses/RespUnauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/RespForbidden"
          },
          "500" : {
            "$ref" : "#/components/responses/RespInternalServerError"
          }
        }
      },
      "post" : {
        "tags" : [ "registry" ],
        "summary" : "Creates new Datasource",
        "responses" : {
          "201" : {
            "description" : "Created successfully",
            "headers" : {
              "Location" : {
                "description" : "URL of the newly created Datasource",
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/RespBadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RespUnauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/RespForbidden"
          },
          "405" : {
            "$ref" : "#/components/responses/RespMethodNotAllowed"
          },
          "409" : {
            "$ref" : "#/components/responses/RespConflict"
          },
          "500" : {
            "$ref" : "#/components/responses/RespInternalServerError"
          }
        },
        "requestBody" : {
          "$ref" : "#/components/requestBodies/Datasource"
        }
      }
    },
    "/registry/{id}" : {
      "get" : {
        "tags" : [ "registry" ],
        "summary" : "Retrieves the Datasource",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the `Datasource`",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Datasource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/RespBadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RespUnauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/RespForbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/RespNotfound"
          },
          "500" : {
            "$ref" : "#/components/responses/RespInternalServerError"
          }
        }
      },
      "put" : {
        "tags" : [ "registry" ],
        "summary" : "Updates the Datasource",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the `Datasource`",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Datasource updated successfully"
          },
          "400" : {
            "$ref" : "#/components/responses/RespBadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RespUnauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/RespForbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/RespNotfound"
          },
          "405" : {
            "$ref" : "#/components/responses/RespMethodNotAllowed"
          },
          "409" : {
            "$ref" : "#/components/responses/RespConflict"
          },
          "500" : {
            "$ref" : "#/components/responses/RespInternalServerError"
          }
        },
        "requestBody" : {
          "$ref" : "#/components/requestBodies/Datasource"
        }
      },
      "delete" : {
        "tags" : [ "registry" ],
        "summary" : "Deletes the Datasource",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the `Datasource`",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response"
          },
          "401" : {
            "$ref" : "#/components/responses/RespUnauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/RespForbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/RespNotfound"
          },
          "405" : {
            "$ref" : "#/components/responses/RespMethodNotAllowed"
          },
          "500" : {
            "$ref" : "#/components/responses/RespInternalServerError"
          }
        }
      }
    },
    "/registry/{type}/{path}/{op}/{value}" : {
      "get" : {
        "tags" : [ "registry" ],
        "summary" : "Filters Datasources",
        "description" : "The filtering API enables filtering based on a given path, operator, and value. Below are few examples:\n* Get datasource with name:\n  `/registry/one/name/equals/home/bedroom/temperature`\n* Filter all datasources with prefix `home` in name:\n  `/registry/many/name/prefix/home`\n* Filter all datasources based on address meta field:\n  `/registry/many/meta.address/contains/Bonn`\n",
        "parameters" : [ {
          "name" : "type",
          "in" : "path",
          "description" : "The expected type of response (one or many)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "path",
          "in" : "path",
          "description" : "Dot-separated path in the registration JSON",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "op",
          "in" : "path",
          "description" : "One of (equals, prefix, suffix, contains) string comparison operations",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "value",
          "in" : "path",
          "description" : "The intended value or value prefix/suffix/substring of the key identified by the path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/ParamPage"
        }, {
          "$ref" : "#/components/parameters/ParamPerPage"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Registry"
                }
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/RespUnauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/RespForbidden"
          },
          "500" : {
            "$ref" : "#/components/responses/RespInternalServerError"
          }
        }
      }
    },
    "/data/" : {
      "post" : {
        "tags" : [ "data" ],
        "summary" : "Submits data",
        "responses" : {
          "202" : {
            "description" : "Accepted"
          },
          "400" : {
            "$ref" : "#/components/responses/RespBadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RespUnauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/RespForbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/RespNotfound"
          },
          "405" : {
            "$ref" : "#/components/responses/RespMethodNotAllowed"
          },
          "415" : {
            "$ref" : "#/components/responses/RespUnsupportedMediaType"
          },
          "500" : {
            "$ref" : "#/components/responses/RespInternalServerError"
          }
        },
        "requestBody" : {
          "$ref" : "#/components/requestBodies/Dataset"
        }
      }
    },
    "/data/{id}" : {
      "post" : {
        "tags" : [ "data" ],
        "summary" : "Submits data with ID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the `Datasource`",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Accepted"
          },
          "400" : {
            "$ref" : "#/components/responses/RespBadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RespUnauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/RespForbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/RespNotfound"
          },
          "405" : {
            "$ref" : "#/components/responses/RespMethodNotAllowed"
          },
          "415" : {
            "$ref" : "#/components/responses/RespUnsupportedMediaType"
          },
          "500" : {
            "$ref" : "#/components/responses/RespInternalServerError"
          }
        },
        "requestBody" : {
          "$ref" : "#/components/requestBodies/Dataset"
        }
      },
      "get" : {
        "tags" : [ "data" ],
        "summary" : "Retrieves data",
        "parameters" : [ {
          "$ref" : "#/components/parameters/ParamPage"
        }, {
          "$ref" : "#/components/parameters/ParamPerPage"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the `Datasource`. Multiple IDs should be seperated by commas",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response\n\nDataset `data` is a [SenML](https://tools.ietf.org/html/draft-jennings-senml-10) object.\n",
            "content" : {
              "application/senml+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Data"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/RespBadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RespUnauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/RespForbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/RespNotfound"
          },
          "500" : {
            "$ref" : "#/components/responses/RespInternalServerError"
          }
        }
      }
    },
    "/aggr/{aggr_id}/{id}" : {
      "get" : {
        "tags" : [ "aggr" ],
        "summary" : "Retrieves aggregated data",
        "parameters" : [ {
          "$ref" : "#/components/parameters/ParamPage"
        }, {
          "$ref" : "#/components/parameters/ParamPerPage"
        }, {
          "name" : "aggr_id",
          "in" : "path",
          "description" : "ID of the `Aggregation` from registry",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the `Datasource` from registry",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response\n",
            "content" : {
              "application/senml+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Aggregation"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/RespBadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RespUnauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/RespForbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/RespNotfound"
          },
          "500" : {
            "$ref" : "#/components/responses/RespInternalServerError"
          }
        }
      }
    }
  },
  "components" : {
    "parameters" : {
      "ParamPage" : {
        "name" : "page",
        "in" : "query",
        "description" : "Page number in the pagination",
        "required" : false,
        "schema" : {
          "type" : "number",
          "format" : "integer"
        }
      },
      "ParamPerPage" : {
        "name" : "per_page",
        "in" : "query",
        "description" : "Number of entries per page",
        "required" : false,
        "schema" : {
          "type" : "number",
          "format" : "integer"
        }
      }
    },
    "responses" : {
      "RespBadRequest" : {
        "description" : "Bad Request",
        "content" : {
          "*/*" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "RespUnauthorized" : {
        "description" : "Unauthorized",
        "content" : {
          "*/*" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "RespForbidden" : {
        "description" : "Forbidden",
        "content" : {
          "*/*" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "RespNotfound" : {
        "description" : "Not Found",
        "content" : {
          "*/*" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "RespMethodNotAllowed" : {
        "description" : "Method Not Allowed",
        "content" : {
          "*/*" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "RespConflict" : {
        "description" : "Conflict",
        "content" : {
          "*/*" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "RespUnsupportedMediaType" : {
        "description" : "Unsupported Media Type",
        "content" : {
          "*/*" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "RespInternalServerError" : {
        "description" : "Internal Server Error",
        "content" : {
          "*/*" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorResponse"
            }
          }
        }
      }
    },
    "requestBodies" : {
      "Dataset" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/SenmlPack"
            }
          }
        },
        "description" : "Dataset to be submitted. \n\nThe dataset is a [SenML](https://tools.ietf.org/html/rfc8428) pack.\n",
        "required" : true
      },
      "Datasource" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Datasource"
            }
          }
        },
        "description" : "Datasource to be created",
        "required" : true
      }
    },
    "schemas" : {
      "Registry" : {
        "type" : "object",
        "properties" : {
          "url" : {
            "type" : "string",
            "format" : "url"
          },
          "entries" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Datasource"
            }
          },
          "page" : {
            "type" : "integer"
          },
          "per_page" : {
            "type" : "integer"
          },
          "total" : {
            "type" : "integer"
          }
        }
      },
      "Datasource" : {
        "type" : "object",
        "required" : [ "resource", "type", "format" ],
        "properties" : {
          "id" : {
            "type" : "string",
            "readOnly" : true
          },
          "url" : {
            "type" : "string",
            "format" : "url",
            "readOnly" : true
          },
          "data" : {
            "type" : "string",
            "format" : "url",
            "readOnly" : true
          },
          "resource" : {
            "type" : "string",
            "format" : "url"
          },
          "meta" : {
            "type" : "object"
          },
          "connector" : {
            "type" : "object",
            "properties" : {
              "mqtt" : {
                "type" : "object",
                "properties" : {
                  "url" : {
                    "type" : "string"
                  },
                  "topic" : {
                    "type" : "string"
                  },
                  "qos" : {
                    "type" : "integer"
                  }
                }
              }
            }
          },
          "retention" : {
            "type" : "string"
          },
          "aggregation" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string",
                  "readOnly" : true
                },
                "interval" : {
                  "type" : "string"
                },
                "data" : {
                  "type" : "string",
                  "format" : "url",
                  "readOnly" : true
                },
                "aggregates" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "retention" : {
                  "type" : "string"
                }
              }
            }
          },
          "type" : {
            "type" : "string"
          },
          "format" : {
            "type" : "string"
          }
        }
      },
      "Data" : {
        "type" : "object",
        "properties" : {
          "url" : {
            "type" : "string"
          },
          "data" : {
            "$ref" : "#/components/schemas/SenmlPack"
          },
          "time" : {
            "type" : "number",
            "format" : "float"
          },
          "page" : {
            "type" : "integer"
          },
          "per_page" : {
            "type" : "integer"
          },
          "total" : {
            "type" : "integer"
          }
        }
      },
      "SenmlPack" : {
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "bn" : {
              "type" : "string"
            },
            "bt" : {
              "type" : "integer",
              "format" : "double"
            },
            "bu" : {
              "type" : "string"
            },
            "bver" : {
              "type" : "integer"
            },
            "n" : {
              "type" : "string"
            },
            "t" : {
              "type" : "integer",
              "format" : "double"
            },
            "u" : {
              "type" : "string"
            },
            "v" : {
              "type" : "number",
              "format" : "double"
            },
            "vs" : {
              "type" : "string"
            },
            "vb" : {
              "type" : "boolean"
            }
          }
        }
      },
      "Aggregation" : {
        "type" : "object",
        "properties" : {
          "url" : {
            "type" : "string"
          },
          "data" : {
            "$ref" : "#/components/schemas/AggrPack"
          },
          "time" : {
            "type" : "number",
            "format" : "float"
          },
          "page" : {
            "type" : "integer"
          },
          "per_page" : {
            "type" : "integer"
          },
          "total" : {
            "type" : "integer"
          }
        }
      },
      "AggrPack" : {
        "type" : "object",
        "properties" : {
          "e" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "ts" : {
                  "type" : "integer",
                  "format" : "int64"
                },
                "te" : {
                  "type" : "integer",
                  "format" : "int64"
                },
                "n" : {
                  "type" : "string"
                },
                "mean" : {
                  "type" : "number",
                  "format" : "float"
                },
                "min" : {
                  "type" : "number",
                  "format" : "float"
                },
                "max" : {
                  "type" : "number",
                  "format" : "float"
                },
                "median" : {
                  "type" : "number",
                  "format" : "float"
                },
                "stddev" : {
                  "type" : "number",
                  "format" : "float"
                },
                "sum" : {
                  "type" : "number",
                  "format" : "float"
                }
              }
            }
          }
        }
      },
      "ErrorResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer"
          },
          "message" : {
            "type" : "string"
          }
        }
      }
    }
  }
}
